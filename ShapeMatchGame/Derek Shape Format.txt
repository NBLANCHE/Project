Hi ---

why don't we send separate images for each square that makes up a shape. This might make it easier on both ends. It certainly makes it easier on the tetris side. So the protocol might look like:

SHAPE ID, TIMESTAMP, ROW#, COL#, IMAGE

So for a "TEE" we would send 4 tweets:
TEE, TIME, 0, 0, IMAGE
TEE, TIME, 1, 0, IMAGE
TEE, TIME, 1, 1, IMAGE
TEE, TIME, 2, 0, IMAGE

and for a left L ("LEL") we would have
LEL, TIME, 0, 0, IMAGE
LEL, TIME, 0, 1, IMAGE
LEL, TIME, 1, 1, IMAGE
LEL, TIME, 2, 1, IMAGE

for right L (REL)
REL, TIME, 0, 0, IMAGE
REL, TIME, 0, 1, IMAGE
REL, TIME, 1, 0, IMAGE
REL, TIME, 2, 0, IMAGE

line (LINE)
LINE, TIME, 0, 0, IMAGE
LINE, TIME, 1, 0, IMAGE
LINE, TIME, 2, 0, IMAGE
LINE, TIME, 3, 0, IMAGE

square (SQUARE)
SQUARE, TIME, 0, 0, IMAGE
SQUARE, TIME, 0, 1, IMAGE
SQUARE, TIME, 1, 0, IMAGE
SQUARE, TIME, 1, 1, IMAGE

left S (LESS)
LESS, TIME, 0, 1, IMAGE
LESS, TIME, 1, 1, IMAGE
LESS, TIME, 1, 0, IMAGE
LESS, TIME, 2, 0, IMAGE

and right S (RESS)
RESS, TIME, 0, 0, IMAGE
RESS, TIME, 1, 0, IMAGE
RESS, TIME, 1, 1, IMAGE
RESS, TIME, 2, 1, IMAGE

This implies a "canonical rotation" for each piece.
@Dustin I'm not sure how easy it is on your side to:
- rotate your grid square images into the canonical rotation
- send image grid squares instead of a single image
.. but I'm hoping it's not too bad

@Fanny I like what you have for flow. There are two flows to consider:
1. in tetris game: random shape choice as default, then force insertion of tetris pieces as they arrive (FIFO queue).
2. in kinect game: random shape choice as default, then force insertion of requested tetris pieces as requests appear (FIFO queue)
I don't think we need to hold the game up on either side when a request is placed. Say a tetris player requests a piece -- that just goes into the request pool, eventually it will come. In the meantime the tetris player is stuck fitting random pieces. (S)he can choose to let the random pieces fall slowly and/or place them away from where the requested piece will go so that the requested piece remains useful when it does arrive.


let me know how this sounds to both of you

Derek


Just confirming on the hidden, ugly tweet format:


"BLOCK", BLOCK_ID, BLOCK_TYPE, ORIGINAL_ORIENTATION, ROW, COL, IMG_URL


BLOCK_ID: an increment that identifies the block "to which this tweet refers" 
BLOCK_TYPE: "TEE", "REL", "LEL", etc. or better names as determined
ROW: 0-3
COL: 0-1 (or reverse this for 0-1 row, 0-3 col, depending on what the "canonical" orientation of each tetromino will be)
IMG_URL: the twitPic URL for the image (? am I correct in assuming this will be a URL? ) 